import h5py
from libc.math cimport sin, cos, acos, asin, log, sqrt, exp, pow
cimport GasUtil
cimport libc.math
import numpy as np
cimport numpy as np
import sys
from Gas cimport Gas
from cython.parallel import prange

sys.path.append('../hdf5_python')
import cython

@cython.cdivision(True)
@cython.boundscheck(False)
@cython.wraparound(False)
@cython.fast_getattr(True)
cdef void Gas7(Gas*object):

    cdef double EN, GAMMA1, GAMMA2, BETA, BETA2, QELA, QMOM, A, B, X1, X2, C, PQ[3], TEMP, Q456, QCORR, QTEMP,QEXC
    cdef double XEN[182], YMOM[182], XEL[153], YEL[153], XEPS[182], YEPS[182]
    cdef double XION[76], YION[76], YINC[76], YIN1[76], XIN2[54], YIN2[54],
    cdef double XIN3[47], YIN3[47], XIN4[42], YIN4[42], XIN5[37], YIN5[37], XIN6[35],
    cdef double YIN6[35], XKSH[60], YKSH[60],
    cdef double XL1S[76], YL1S[76], XL2S[76], YL2S[76], XL3S[76], YL3S[76],
    cdef double XM1S[79], YM1S[79], XM2S[80], YM2S[80], XM3S[80], YM3S[80],
    cdef double XM4S[82], YM4S[82], XM5S[83], YM5S[83]
    cdef double X1S5[70], Y1S5[70], YP1S5[70], X1S4[38], Y1S4[38], YP1S4[38],
    cdef double X1S3[46], Y1S3[46], YP1S3[46], X1S2[20], Y1S2[20], YP1S2[20],
    cdef double X2P10[22], Y2P10[22], YP2P10[22], X2P9[21], Y2P9[21], YP2P9[21],
    cdef double X2P8[22], Y2P8[22], YP2P8[22], X2P7[22], Y2P7[22], YP2P7[22],
    cdef double X2P6[22], Y2P6[22], YP2P6[22], X3D6[24], Y3D6[24], YP3D6[24],
    cdef double X2P5[15], Y2P5[15], YP2P5[15], X3D4P[24], Y3D4P[24], YP3D4P[24],
    cdef double X3D3[24], Y3D3[24], YP3D3[24], X3D4[26], Y3D4[26], YP3D4[26],
    cdef double X3D1PP[23], Y3D1PP[23], YP3D1PP[23], X3D1P[22], Y3D1P[22], YP3D1P[22],
    cdef double X2S5[18], Y2S5[18], YP2S5[18], X3P105[18], Y3P105[18], YP3P105[18],
    cdef double X2P4[14], Y2P4[14], YP2P4[14], X4DSUM[16], Y4DSUM[16], YP4DSUM[16],
    cdef double X2P3[14], Y2P3[14], YP2P3[14], X2P2[14], Y2P2[14], YP2P2[14],
    cdef double X2P1[15], Y2P1[15], YP2P1[15],
    cdef int IOFFN[50], IOFFION[12]
    cdef double Z54T[25], EBRM[25]
    XEN = [0.00, .001, .005, .007, 0.01, .015, 0.02, .025, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.10, 0.12, 0.14, 0.17,
         0.20, 0.25, 0.27, 0.30, 0.32, 0.35, 0.37, 0.40, 0.42, 0.44, 0.46, 0.48, 0.50, 0.51, 0.52, 0.53, 0.54, 0.55,
         0.56, 0.57, 0.58, 0.59, 0.60, 0.61, 0.62, 0.63, 0.64, 0.65, 0.66, 0.67, 0.68, 0.69, 0.70, .715, 0.73, 0.75,
         0.77, 0.80, 0.83, 0.85, 0.87, 0.90, 1.00, 1.08, 1.14, 1.20, 1.30, 1.40, 1.50, 1.70, 2.00, 2.50, 3.00, 3.50,
         4.00, 4.50, 5.00, 5.50, 6.00, 6.50, 7.00, 8.00, 9.00, 10.0, 12.0, 15.0, 18.0, 20.0, 25.0, 30.0, 40.0, 50.0,
         60.0, 70.0, 80.0, 90.0, 100., 125., 150., 200., 250., 300., 400., 500., 600., 700., 800., 1000., 1500., 2000.,
         3000., 4000., 5000., 6000., 8000., 1.0e4, 1.5e4, 2.0e4, 3.0e4, 4.0e4, 5.0e4, 6.0e4, 8.0e4, 1.0e5, 1.25e5,
         1.5e5, 1.75e5, 2.0e5, 2.5e5, 3.0e5, 3.5e5, 4.0e5, 4.5e5, 5.0e5, 6.0e5, 7.0e5, 8.0e5, 9.0e5, 1.0e6, 1.25e6,
         1.5e6, 1.75e6, 2.0e6, 2.5e6, 3.0e6, 3.5e6, 4.0e6, 4.5e6, 5.0e6, 6.0e6, 7.0e6, 8.0e6, 9.0e6, 1.0e7, 1.25e7,
         1.5e7, 1.75e7, 2.0e7, 2.5e7, 3.0e7, 3.5e7, 4.0e7, 4.5e7, 5.0e7, 6.0e7, 7.0e7, 8.0e7, 9.0e7, 1.0e8, 1.25e8,
         1.5e8, 1.75e8, 2.0e8, 2.5e8, 3.0e8, 3.5e8, 4.0e8, 4.5e8, 5.0e8, 6.0e8, 7.0e8, 8.0e8, 9.0e8, 1.0e9]

    YMOM = object.EMT
    # ELASTIC TOTAL
    XEL = [0.00, .001, .005, .007, 0.01, .015, 0.02, .025, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.10, 0.12, 0.14, 0.17,
             0.20, 0.25, 0.27, 0.30, 0.32, 0.35, 0.37, 0.40, 0.42, 0.44, 0.46, 0.48, 0.50, 0.51, 0.52, 0.53, 0.54, 0.55,
             0.56, 0.57, 0.58, 0.59, 0.60, 0.61, 0.62, 0.63, 0.64, 0.65, 0.66, 0.67, 0.68, 0.69, 0.70, 0.75, 0.80, 0.85,
             0.90, 1.00, 1.20, 1.50, 1.75, 2.00, 2.50, 2.75, 3.00, 3.75, 4.00, 4.50, 5.00, 5.50, 6.00, 6.50, 7.00, 8.00,
             9.00, 10.0, 12.0, 15.0, 18.0, 20.0, 25.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 100., 125., 150., 200.,
             250., 300., 400., 500., 600., 700., 800., 1000., 1500., 2000., 3000., 4000., 5000., 6000., 8000., 1.0e4, 1.5e4,
             2.0e4, 3.0e4, 4.0e4, 5.0e4, 6.0e4, 8.0e4, 1.0e5, 1.25e5, 1.5e5, 1.75e5, 2.0e5, 2.5e5, 3.0e5, 3.5e5, 4.0e5,
             4.5e5, 5.0e5, 6.0e5, 7.0e5, 8.0e5, 9.0e5, 1.0e6, 1.25e6, 1.5e6, 1.75e6, 2.0e6, 2.5e6, 3.0e6, 3.5e6, 4.0e6,
             4.5e6, 5.0e6, 6.0e6, 7.0e6, 8.0e6, 9.0e6, 1.0e7, 1.25e7, 1.5e7, 1.75e7, 2.0e7, 2.5e7, 3.0e7, 3.5e7, 7.0e7,
             1.e9]
    YEL = object.ET
    # ELASTIC ANGULAR  DISTRIBUTION (EPSILON)
    XEPS = [0.00, .001, .005, .007, .010, .015, .020, .025, .030, .040, 0.05, 0.06, 0.07, 0.08, 0.10, 0.12, 0.14, 0.17,
              0.20, 0.25, 0.27, 0.30, 0.32, 0.35, 0.37, 0.40, 0.42, 0.44, 0.46, 0.48, 0.50, 0.51, 0.52, 0.53, 0.54, 0.55,
              0.56, 0.57, 0.58, 0.59, 0.60, 0.61, 0.62, 0.63, 0.64, 0.65, 0.66, 0.67, 0.68, 0.69, 0.70, 0.71, 0.72, 0.73,
              0.75, 0.77, 0.80, 0.83, 0.85, 0.87, 0.90, 1.00, 1.10, 1.20, 1.30, 1.40, 1.50, 1.70, 2.00, 2.50, 3.00, 3.50,
              4.00, 4.50, 5.00, 5.50, 6.00, 6.50, 7.00, 8.00, 9.00, 10.0, 12.0, 15.0, 18.0, 20.0, 25.0, 30.0, 40.0, 50.0,
              60.0, 70.0, 80.0, 90.0, 100., 125., 150., 200., 250., 300., 400., 500., 600., 700., 800., 1000., 1500., 2000.,
              3000., 4000., 5000., 6000., 8000., 10000., 15000., 2.0e4, 3.0e4, 4.0e4, 5.0e4, 6.0e4, 8.0e4, 1.0e5, 1.25e5,
              1.5e5, 1.75e5, 2.0e5, 2.5e5, 3.0e5, 3.5e5, 4.0e5, 4.5e5, 5.0e5, 6.0e5, 7.0e5, 8.0e5, 9.0e5, 1.0e6, 1.25e6,
              1.5e6, 1.75e6, 2.0e6, 2.5e6, 3.0e6, 3.5e6, 4.0e6, 4.5e6, 5.0e6, 6.0e6, 7.0e6, 8.0e6, 9.0e6, 1.0e7, 1.25e7,
              1.5e7, 1.75e7, 2.0e7, 2.5e7, 3.0e7, 3.5e7, 4.0e7, 4.5e7, 5.0e7, 6.0e7, 7.0e7, 8.0e7, 9.0e7, 1.0e8, 1.25e8,
              1.5e8, 1.75e8, 2.0e8, 2.5e8, 3.0e8, 3.5e8, 4.0e8, 4.5e8, 5.0e8, 6.0e8, 7.0e8, 8.0e8, 9.0e8, 1.0e9]
    YEPS = object.EAT
    # IONISATION (VALUES ABOVE 20KEV GENERATED BY BORN BETHE IN SUB)
    XION = [12.129843, 12.5, 13.0, 13.5, 14.0, 14.5, 15.0, 15.5, 16.0, 16.5, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0,
              24.0, 26.0, 28.0, 30.0, 32.0, 34.0, 36.0, 40.0, 45.0, 50.0, 55.0, 60.0, 65.0, 70.0, 80.0, 90.0, 100., 110.,
              120., 130., 140., 150., 160., 180., 200., 250., 300., 350., 400., 450., 500., 550., 600., 700., 800., 900.,
              1000., 1200., 1400., 1600., 1800., 2000., 2500., 3000., 3500., 4000., 4500., 5000., 5500., 6000., 7000.,
              8000., 9000., 10000., 12000., 14000., 16000., 18000., 20000.]
    # GROSS IONISATION
    YION = [0.00, .137, .344, .549, .748, .939, 1.12, 1.29, 1.46, 1.62, 1.77, 2.04, 2.30, 2.52, 2.73, 2.93, 3.10, 3.27,
              3.56, 3.82, 4.06, 4.27, 4.42, 4.53, 4.73, 4.94, 5.11, 5.21, 5.31, 5.36, 5.40, 5.46, 5.56, 5.68, 5.75, 5.75,
              5.70, 5.58, 5.48, 5.35, 5.11, 4.83, 4.36, 4.02, 3.72, 3.46, 3.24, 3.06, 2.87, 2.72, 2.49, 2.26, 2.10, 1.94,
              1.68, 1.48, 1.35, 1.23, 1.13, .964, .836, .736, .663, .602, .555, .515, .480, .424, .382, .346, .319, .273,
              .242, .218, .200, .186]

    # COUNTING IONISATION
    YINC = [0.00, .137, .344, .549, .748, .939, 1.12, 1.29, 1.46, 1.62, 1.77, 2.04, 2.30, 2.52, 2.73, 2.93, 3.10, 3.27,
              3.56, 3.82, 4.06, 4.27, 4.42, 4.53, 4.66, 4.77, 4.84, 4.89, 4.95, 4.99, 5.02, 5.04, 5.03, 5.02, 4.98, 4.90,
              4.80, 4.69, 4.60, 4.49, 4.27, 4.01, 3.58, 3.27, 3.00, 2.76, 2.57, 2.41, 2.25, 2.12, 1.93, 1.75, 1.62, 1.49,
              1.28, 1.12, 1.03, .923, .855, .731, .632, .557, .501, .455, .420, .389, .364, .320, .289, .262, .241, .206,
              .183, .165, .152, .141]

    YIN1 = [0.00, .137, .344, .549, .748, .939, 1.12, 1.29, 1.46, 1.62, 1.77, 2.04, 2.30, 2.52, 2.73, 2.93, 3.10, 3.27,
              3.56, 3.82, 4.06, 4.27, 4.42, 4.51, 4.59, 4.60, 4.58, 4.60, 4.62, 4.64, 4.67, 4.64, 4.53, 4.44, 4.33, 4.21,
              4.08, 4.01, 3.93, 3.85, 3.65, 3.44, 3.06, 2.77, 2.48, 2.31, 2.15, 2.00, 1.87, 1.75, 1.58, 1.42, 1.32, 1.21,
              1.03, .903, .830, .744, .689, .589, .509, .449, .404, .367, .339, .314, .293, .258, .233, .211, .194, .166,
              .148, .133, .123, .114]

    XIN2 = [33.105, 36.0, 40.0, 45.0, 50.0, 55.0, 60.0, 65.0, 70.0, 80.0, 90.0, 100., 110., 120., 130., 140., 150., 160.,
              180., 200., 250., 300., 350., 400., 450., 500., 550., 600., 700., 800., 900., 1000., 1200., 1400., 1600.,
              1800., 2000., 2500., 3000., 3500., 4000., 4500., 5000., 5500., 6000., 7000., 8000., 9000., 10000., 12000.,
              14000., 16000., 18000., 20000.]


    YIN2 = [0.0, 0.02, .0688, .174, .257, .318, .363, .376, .386, .398, .461, .503, .534, .533, .521, .495, .470, .447,
              .405, .373, .325, .305, .294, .267, .253, .240, .230, .220, .204, .190, .175, .170, .145, .127, .117, .105,
              .0969, .0828, .0716, .0631, .0568, .0516, .0476, .0441, .0412, .0363, .0327, .0297, .0220, .0188, .0176,
              .0151, .0139, .0129]

    XIN3 = [64.15, 70.0, 80.0, 90.0, 100., 110., 120., 130., 140., 150., 160., 180., 200., 250., 300., 350., 400., 450.,
              500., 550., 600., 700., 800., 900., 1000., 1200., 1400., 1600., 1800., 2000., 2500., 3000., 3500., 4000.,
              4500., 5000., 5500., 6000., 7000., 8000., 9000., 10000., 12000., 14000., 16000., 18000., 20000.]

    YIN3 = [0.0, .001, .010, .0324, .0764, .122, .159, .184, .190, .189, .180, .169, .158, .142, .140, .137, .129, .123,
              .118, .112, .107, .102, .0921, .0844, .0825, .0703, .0616, .0566, .0507, .0470, .0402, .0347, .0306, .0275,
              .0250, .0231, .0214, .0200, .0176, .0159, .0144, .0132, .0113, .0101, .00907, .00835, .00775]

    XIN4 = [106.35, 120., 130., 140., 150., 160., 180., 200., 250., 300., 350., 400., 450., 500., 550., 600., 700., 800.,
              900., 1000., 1200., 1400., 1600., 1800., 2000., 2500., 3000., 3500., 4000., 4500., 5000., 5500., 6000., 7000.,
              8000., 9000., 10000., 12000., 14000., 16000., 18000., 20000.]

    YIN4 = [0.0, .0002, .00098, .0033, .0103, .0157, .0279, .0426, .0483, .0421, .0425, .0409, .0402, .0395, .0382, .0369,
              .0348, .0339, .0319, .0294, .0251, .0219, .0202, .0181, .0167, .0143, .0124, .0109, .00981, .00891, .00823,
              .00762, .00713, .00627, .00566, .00513, .00472, .00404, .00358, .00323, .00298, .00276]

    XIN5 = [160.45, 180., 200., 250., 300., 350., 400., 450., 500., 550., 600., 700., 800., 900., 1000., 1200., 1400.,
              1600., 1800., 2000., 2500., 3000., 3500., 4000., 4500., 5000., 5500., 6000., 7000., 8000., 9000., 10000.,
              12000., 14000., 16000., 18000., 20000.]

    YIN5 = [0.0, .00013, .0018, .0062, .0101, .0113, .0106, .0108, .0109, .0104, .0098, .0089, .0078, .0073, .0069, .059,
              .051, .0047, .0042, .0039, .0034, .0029, .0026, .0023, .0021, .00193, .00179, .00167, .00147, .00133, .00120,
              .00111, .00095, .00084, .00076, .00070, .00065]

    XIN6 = [227.2, 250., 300., 350., 400., 450., 500., 550., 600., 700., 800., 900., 1000., 1200., 1400., 1600., 1800.,
              2000., 2500., 3000., 3500., 4000., 4500., 5000., 5500., 6000., 7000., 8000., 9000., 10000., 12000., 14000.,
              16000., 18000., 20000.]

    YIN6 = [0.0, .00005, .00036, .00082, .00128, .00140, .00153, .00162, .00171, .00188, .00182, .00191, .00188, .00160,
              .00140, .00129, .00116, .00107, .00092, .00079, .00070, .00063, .00057, .00053, .00049, .00046, .00040,
              .00036, .00033, .00030, .00026, .00023, .00021, .00019, .00018]

    XKSH = [34561.,35490.,36526.,37592.,38690.,39819.,40982.,42178.,
         43410.,45981.,
         48706.,51591.,54648.,57885.,64947.,72871.,81761.,1.00e5,1.22e5,
         1.50e5,
         1.83e5,2.24e5,2.82e5,3.65e5,4.87e5,6.49e5,8.66e5,1.00e6,1.22e6,
         1.50e6,
         1.83e6,2.24e6,2.82e6,3.65e6,4.87e6,6.49e6,8.66e6,1.00e7,1.22e7,
         1.50e7,
         2.05e7,2.51e7,3.07e7,4.10e7,5.16e7,6.31e7,7.50e7,8.66e7,1.00e8,
         1.22e8,
         1.50e8,2.05e8,2.51e8,3.07e8,4.10e8,5.16e8,6.31e8,7.50e8,8.66e8,
         1.00e9
    ]
    YKSH = [0.0,1.74e-8,3.56e-8,5.30e-8,6.98e-8,8.58e-8,1.01e-7,
         1.16e-7,1.29e-7,1.55e-7,
         1.78e-7,1.99e-7,2.17e-7,2.34e-7,2.62e-7,2.84e-7,3.00e-7,3.20e-7,
         3.31e-7,3.35e-7,
         3.34e-7,3.31e-7,3.26e-7,3.21e-7,3.20e-7,3.23e-7,3.29e-7,3.34e-7,
         3.43e-7,3.55e-7,
         3.68e-7,3.83e-7,4.01e-7,4.23e-7,4.50e-7,4.77e-7,5.05e-7,5.20e-7,
         5.40e-7,5.61e-7,
         5.93e-7,6.14e-7,6.35e-7,6.65e-7,6.89e-7,7.10e-7,7.28e-7,7.43e-7,
         7.58e-7,7.79e-7,
         7.99e-7,8.32e-7,8.53e-7,8.74e-7,9.03e-7,9.27e-7,9.47e-7,9.65e-7,
         9.79e-7,9.94e-7
    ]
    XL1S = [5453.,5499.2,5658.7,5823.,5992.,6166.,6345.,6529.,
         6719.,6914.,
         7321.,7753.,8210.,8695.,9208.,1.00e4,1.09e4,1.19e4,1.30e4,1.41e4,
         1.58e4,1.78e4,2.00e4,2.24e4,2.51e4,2.90e4,3.35e4,3.87e4,4.47e4,
         5.16e4,
         6.13e4,7.29e4,8.66e4,1.00e5,1.22e5,1.54e5,2.00e5,2.59e5,3.35e5,
         4.47e5,
         5.96e5,8.66e5,1.00e6,1.22e6,1.50e6,1.83e6,2.30e6,2.90e6,3.65e6,
         4.60e6,
         5.79e6,7.50e6,8.66e6,1.00e7,1.22e7,1.50e7,1.83e7,2.30e7,2.90e7,
         3.65e7,
         4.60e7,5.79e7,7.29e7,8.66e7,1.00e8,1.22e8,1.50e8,1.83e8,2.30e8,
         2.90e8,
         3.65e8,4.60e8,5.79e8,7.29e8,8.66e8,1.00e9
    ]
    YL1S = [0.0,2.21e-7,9.39e-7,1.62e-6,2.26e-6,2.86e-6,3.43e-6,
         3.96e-6,4.47e-6,4.95e-6,
         5.82e-6,6.59e-6,7.26e-6,7.86e-6,8.37e-6,9.02e-6,9.52e-6,9.89e-6,
         1.02e-5,1.03e-5,
         1.04e-5,1.04e-5,1.02e-5,9.98e-6,9.68e-6,9.23e-6,8.73e-6,8.20e-6,
         7.66e-6,7.14e-6,
         6.53e-6,5.97e-6,5.46e-6,5.06e-6,4.57e-6,4.08e-6,3.64e-6,3.30e-6,
         3.04e-6,2.84e-6,
         2.71e-6,2.64e-6,2.64e-6,2.66e-6,2.69e-6,2.74e-6,2.82e-6,2.90e-6,
         3.00e-6,3.11e-6,
         3.23e-6,3.36e-6,3.44e-6,3.52e-6,3.63e-6,3.74e-6,3.85e-6,3.98e-6,
         4.12e-6,4.25e-6,
         4.38e-6,4.51e-6,4.65e-6,4.75e-6,4.83e-6,4.95e-6,5.06e-6,5.18e-6,
         5.32e-6,5.45e-6,
         5.58e-6,5.72e-6,5.85e-6,5.99e-6,6.09e-6,6.17e-6
    ]
    XL2S = [5107.,5160.6,5311.3,5466.,5626.,5790.,5959.,6133.,
         6312.,6686.,
         7081.,7501.,7945.,8416.,9175.,1.00e4,1.09e4,1.19e4,1.30e4,1.41e4,
         1.58e4,1.78e4,2.00e4,2.24e4,2.51e4,2.90e4,3.35e4,3.87e4,4.47e4,
         5.16e4,
         6.13e4,7.29e4,8.66e4,1.00e5,1.22e5,1.54e5,2.00e5,2.59e5,3.35e5,
         4.47e5,
         5.96e5,8.66e5,1.00e6,1.22e6,1.50e6,1.83e6,2.30e6,2.90e6,3.65e6,
         4.60e6,
         5.79e6,7.50e6,8.66e6,1.00e7,1.22e7,1.50e7,2.05e7,2.59e7,3.16e7,
         4.10e7,
         5.16e7,6.31e7,7.50e7,8.66e7,1.00e8,1.22e8,1.50e8,2.05e8,2.59e8,
         3.16e8,
         4.10e8,5.16e8,6.31e8,7.50e8,8.66e8,1.00e9
    ]
    YL2S = [0.0,4.47e-7,1.62e-6,2.72e-6,3.76e-6,4.73e-6,5.64e-6,
         6.49e-6,7.28e-6,8.71e-6,
         9.94e-6,1.10e-5,1.19e-5,1.27e-5,1.36e-5,1.43e-5,1.47e-5,1.50e-5,
         1.52e-5,1.52e-5,
         1.51e-5,1.49e-5,1.45e-5,1.41e-5,1.36e-5,1.29e-5,1.21e-5,1.13e-5,
         1.06e-5,9.81e-6,
         8.97e-6,8.20e-6,7.49e-6,6.96e-6,6.29e-6,5.63e-6,5.03e-6,4.55e-6,
         4.19e-6,3.92e-6,
         3.75e-6,3.66e-6,3.66e-6,3.69e-6,3.74e-6,3.82e-6,3.93e-6,4.06e-6,
         4.20e-6,4.36e-6,
         4.52e-6,4.72e-6,4.83e-6,4.94e-6,5.10e-6,5.26e-6,5.52e-6,5.71e-6,
         5.88e-6,6.09e-6,
         6.28e-6,6.45e-6,6.59e-6,6.71e-6,6.83e-6,7.00e-6,7.17e-6,7.43e-6,
         7.63e-6,7.79e-6,
         8.01e-6,8.20e-6,8.37e-6,8.51e-6,8.63e-6,8.75e-6
    ]
    XL3S = [4786.,4881.6,5023.7,5170.,5321.,5476.,5635.,5800.,
         5968.,6321.,
         6695.,7091.,7511.,8187.,8924.,1.00e4,1.09e4,1.19e4,1.30e4,1.41e4,
         1.58e4,1.78e4,2.00e4,2.24e4,2.51e4,2.90e4,3.35e4,3.87e4,4.47e4,
         5.16e4,
         6.13e4,7.29e4,8.66e4,1.00e5,1.22e5,1.54e5,2.00e5,2.59e5,3.35e5,
         4.47e5,
         5.96e5,8.66e5,1.00e6,1.22e6,1.50e6,1.83e6,2.30e6,2.90e6,3.65e6,
         4.60e6,
         5.79e6,7.50e6,8.66e6,1.00e7,1.22e7,1.50e7,1.83e7,2.30e7,2.90e7,
         3.65e7,
         4.60e7,5.79e7,7.50e7,8.66e7,1.00e8,1.22e8,1.50e8,1.83e8,2.30e8,
         2.90e8,
         3.65e8,4.60e8,5.79e8,7.50e8,8.66e8,1.00e9
    ]
    YL3S = [0.0,1.94e-6,4.64e-6,7.17e-6,9.54e-6,1.18e-5,1.38e-5,
         1.58e-5,1.76e-5,2.08e-5,
         2.36e-5,2.60e-5,2.80e-5,3.05e-5,3.23e-5,3.40e-5,3.48e-5,3.52e-5,
         3.54e-5,3.53e-5,
         3.48e-5,3.41e-5,3.31e-5,3.19e-5,3.06e-5,2.86e-5,2.70e-5,2.52e-5,
         2.34e-5,2.17e-5,
         1.98e-5,1.81e-5,1.65e-5,1.53e-5,1.38e-5,1.23e-5,1.09e-5,9.89e-6,
         9.10e-6,8.49e-6,
         8.10e-6,7.90e-6,7.89e-6,7.93e-6,8.04e-6,8.19e-6,8.41e-6,8.67e-6,
         8.97e-6,9.29e-6,
         9.63e-6,1.00e-5,1.03e-5,1.05e-5,1.08e-5,1.12e-5,1.15e-5,1.19e-5,
         1.23e-5,1.27e-5,
         1.31e-5,1.35e-5,1.39e-5,1.42e-5,1.45e-5,1.48e-5,1.52e-5,1.55e-5,
         1.59e-5,1.63e-5,
         1.67e-5,1.71e-5,1.75e-5,1.80e-5,1.82e-5,1.85e-5
    ]
    XM1S = [1148.7,1180.9,1214.7,1249.4,1285.1,1321.8,1359.7,1398.6,
         1438.7,1479.9,
         1566.,1657.,1754.,1856.,1965.,2140.,2330.,2538.,2765.,3012.,
         3376.,3784.,4243.,4758.,5335.,6157.,7105.,8201.,1.00e4,1.22e4,
         1.50e4,1.88e4,2.37e4,3.00e4,3.76e4,4.87e4,6.31e4,8.41e4,1.00e5,
         1.22e5,
         1.50e5,1.88e5,2.37e5,3.00e5,3.76e5,4.87e5,6.31e5,8.41e5,1.00e6,
         1.22e6,
         1.50e6,1.88e6,2.37e6,3.00e6,3.76e6,4.87e6,6.31e6,8.41e6,1.00e7,
         1.22e7,
         1.50e7,1.88e7,2.37e7,2.99e7,3.76e7,4.87e7,6.31e7,8.41e7,1.00e8,
         1.22e8,
         1.50e8,1.88e8,2.37e8,2.99e8,3.76e8,4.87e8,6.31e8,8.41e8,1.00e9
    ]
    YM1S = [0.0,2.13e-5,4.08e-5,5.85e-5,7.47e-5,8.95e-5,1.03e-4,
         1.16e-4,1.27e-4,1.37e-4,
         1.56e-4,1.71e-4,1.84e-4,1.95e-4,2.04e-4,2.15e-4,2.23e-4,2.28e-4,
         2.30e-4,2.31e-4,
         2.29e-4,2.24e-4,2.18e-4,2.10e-4,2.01e-4,1.88e-4,1.75e-4,1.62e-4,
         1.44e-4,1.27e-4,
         1.12e-4,9.60e-5,8.20e-5,6.83e-5,5.92e-5,4.93e-5,4.11e-5,3.38e-5,
         3.03e-5,2.67e-5,
         2.38e-5,2.10e-5,1.88e-5,1.71e-5,1.58e-5,1.47e-5,1.40e-5,1.35e-5,
         1.34e-5,1.33e-5,
         1.34e-5,1.35e-5,1.37e-5,1.40e-5,1.44e-5,1.48e-5,1.53e-5,1.59e-5,
         1.62e-5,1.66e-5,
         1.70e-5,1.75e-5,1.80e-5,1.85e-5,1.90e-5,1.96e-5,2.01e-5,2.08e-5,
         2.11e-5,2.16e-5,
         2.20e-5,2.25e-5,2.30e-5,2.35e-5,2.40e-5,2.46e-5,2.52e-5,2.58e-5,
         2.62e-5
    ]
    XM2S = [1002.1,1012.5,1041.7,1071.7,1102.6,1134.5,1167.2,1201.,
         1236.,1271.,
         1346.,1425.,1509.,1597.,1691.,1843.,2008.,2188.,2384.,2598.,
         2913.,3267.,3664.,4109.,4744.,5635.,6695.,7730.,8925.,1.00e4,
         1.22e4,1.50e4,1.88e4,2.37e4,3.00e4,3.76e4,4.87e4,6.31e4,8.41e4,
         1.00e5,
         1.22e5,1.50e5,1.88e5,2.37e5,3.00e5,3.76e5,4.87e5,6.31e5,8.41e5,
         1.00e6,
         1.22e6,1.50e6,1.88e6,2.37e6,3.00e6,3.76e6,4.87e6,6.31e6,8.41e6,
         1.00e7,
         1.22e7,1.50e7,1.88e7,2.37e7,2.99e7,3.76e7,4.87e7,6.31e7,8.41e7,
         1.00e8,
         1.22e8,1.50e8,1.88e8,2.37e8,2.99e8,3.76e8,4.87e8,6.31e8,8.41e8,
         1.00e9
    ]
    YM2S = [0.0,1.17e-5,4.18e-5,6.88e-5,9.29e-5,1.15e-4,1.34e-4,
         1.52e-4,1.68e-4,1.83e-4,
         2.08e-4,2.30e-4,2.49e-4,2.64e-4,2.78e-4,2.95e-4,3.09e-4,3.19e-4,
         3.27e-4,3.31e-4,
         3.34e-4,3.32e-4,3.27e-4,3.19e-4,3.06e-4,2.86e-4,2.64e-4,2.45e-4,
         2.26e-4,2.11e-4,
         1.86e-4,1.63e-4,1.39e-4,1.19e-4,1.01e-4,8.55e-5,7.12e-5,5.94e-5,
         4.90e-5,4.38e-5,
         3.87e-5,3.45e-5,3.05e-5,2.74e-5,2.50e-5,2.31e-5,2.16e-5,2.06e-5,
         1.99e-5,1.98e-5,
         1.97e-5,1.98e-5,2.01e-5,2.05e-5,2.10e-5,2.16e-5,2.23e-5,2.31e-5,
         2.40e-5,2.46e-5,
         2.52e-5,2.59e-5,2.67e-5,2.75e-5,2.83e-5,2.91e-5,3.00e-5,3.09e-5,
         3.20e-5,3.26e-5,
         3.33e-5,3.40e-5,3.48e-5,3.56e-5,3.65e-5,3.73e-5,3.82e-5,3.91e-5,
         4.01e-5,4.08e-5
    ]
    XM3S = [940.6,958.1,985.7,1014.1,1043.3,1073.3,1104.3,1136.1,
         1168.9,1202.6,
         1273.,1348.,1427.,1510.,1599.,1693.,1844.,2009.,2189.,2385.,
         2599.,2915.,3269.,3666.,4111.,4746.,5637.,6697.,7732.,8927.,
         1.00e4,1.22e4,1.50e4,1.88e4,2.37e4,3.00e4,3.76e4,4.87e4,6.31e4,
         8.41e4,
         1.00e5,1.22e5,1.50e5,1.88e5,2.37e5,3.00e5,3.76e5,4.87e5,6.31e5,
         8.41e5,
         1.00e6,1.22e6,1.88e6,2.37e6,3.00e6,3.76e6,4.87e6,6.31e6,8.41e6,
         1.00e7,
         1.22e7,1.50e7,1.88e7,2.37e7,2.99e7,3.76e7,4.87e7,6.31e7,8.41e7,
         1.00e8,
         1.22e8,1.50e8,1.88e8,2.37e8,2.99e8,3.76e8,4.87e8,6.31e8,8.41e8,
         1.00e9
    ]
    YM3S = [0.0,5.19e-5,1.24e-4,1.88e-4,2.44e-4,2.95e-4,3.40e-4,
         3.81e-4,4.18e-4,4.51e-4,
         5.10e-4,5.59e-4,6.01e-4,6.37e-4,6.68e-4,6.96e-4,7.29e-4,7.56e-4,
         7.75e-4,7.88e-4,
         7.96e-4,7.96e-4,7.88e-4,7.72e-4,7.50e-4,7.15e-4,6.66e-4,6.12e-4,
         5.66e-4,5.20e-4,
         4.85e-4,4.27e-4,3.74e-4,3.19e-4,2.72e-4,2.31e-4,1.96e-4,1.63e-4,
         1.36e-4,1.12e-4,
         1.00e-4,8.86e-5,7.89e-5,6.99e-5,6.27e-5,5.71e-5,5.29e-5,4.94e-5,
         4.71e-5,4.57e-5,
         4.53e-5,4.52e-5,4.61e-5,4.71e-5,4.82e-5,4.96e-5,5.13e-5,5.31e-5,
         5.52e-5,5.65e-5,
         5.81e-5,5.97e-5,6.15e-5,6.34e-5,6.53e-5,6.71e-5,6.93e-5,7.14e-5,
         7.38e-5,7.52e-5,
         7.69e-5,7.86e-5,8.05e-5,8.24e-5,8.43e-5,8.62e-5,8.84e-5,9.05e-5,
         9.29e-5,9.43e-5]
    # M4-SHELL IONISATION

    XM4S = [689.0,706.2,726.8,748.1,770.0,792.6,815.7,839.6,864.2,
         889.5,
         942.3,998.2,1057.,1120.,1187.,1294.,1411.,1538.,1677.,1828.,
         2052.,2302.,2583.,2899.,3253.,3756.,4338.,5010.,5786.,6681.,
         7716.,8911.,1.00e4,1.22e4,1.50e4,1.88e4,2.37e4,3.00e4,3.76e4,
         4.87e4,
         6.31e4,8.41e4,1.00e5,1.22e5,1.50e5,1.88e5,2.37e5,3.00e5,3.76e5,
         4.87e5,
         6.31e5,8.41e5,1.00e6,1.22e6,1.88e6,2.37e6,3.00e6,3.76e6,4.87e6,
         6.31e6,
         8.41e6,1.00e7,1.22e7,1.50e7,1.88e7,2.37e7,2.99e7,3.76e7,4.87e7,
         6.31e7,
         8.41e7,1.00e8,1.22e8,1.50e8,1.88e8,2.37e8,2.99e8,3.76e8,4.87e8,
         6.31e8,
         8.41e8,1.00e9
    ]
    YM4S = [0.0,1.79e-4,3.69e-4,5.38e-4,6.89e-4,8.24e-4,9.45e-4,
         1.05e-3,1.15e-3,1.24e-3,
         1.39e-3,1.52e-3,1.62e-3,1.71e-3,1.79e-3,1.88e-3,1.95e-3,2.00e-3,
         2.03e-3,2.05e-3,
         2.06e-3,2.05e-3,2.01e-3,1.97e-3,1.91e-3,1.82e-3,1.72e-3,1.61e-3,
         1.50e-3,1.39e-3,
         1.29e-3,1.18e-3,1.11e-3,9.84e-4,8.68e-4,7.49e-4,6.43e-4,5.51e-4,
         4.71e-4,3.96e-4,
         3.33e-4,2.77e-4,2.50e-4,2.22e-4,1.99e-4,1.77e-4,1.60e-4,1.47e-4,
         1.37e-4,1.29e-4,
         1.24e-4,1.21e-4,1.21e-4,1.21e-4,1.25e-4,1.29e-4,1.33e-4,1.38e-4,
         1.43e-4,1.49e-4,
         1.56e-4,1.61e-4,1.66e-4,1.71e-4,1.77e-4,1.83e-4,1.89e-4,1.96e-4,
         2.03e-4,2.10e-4,
         2.18e-4,2.22e-4,2.28e-4,2.33e-4,2.40e-4,2.46e-4,2.52e-4,2.58e-4,
         2.65e-4,2.73e-4,
         2.80e-4,2.85e-4]
    # M5-SHELL IONISATION

    XM5S = [676.4,686.9,707.0,727.7,748.9,770.8,793.4,816.6,840.4,
         865.0,
         916.3,970.7,1028.,1089.,1154.,1258.,1372.,1495.,1630.,1777.,
         1994.,2238.,2511.,2817.,3161.,3651.,4216.,4869.,5622.,6493.,
         7717.,8911.,1.00e4,1.22e4,1.50e4,1.88e4,2.37e4,3.00e4,3.76e4,
         4.87e4,
         6.31e4,8.41e4,1.00e5,1.22e5,1.50e5,1.88e5,2.37e5,3.00e5,3.76e5,
         4.87e5,
         6.31e5,8.41e5,1.00e6,1.22e6,1.50e6,1.88e6,2.37e6,3.00e6,3.76e6,
         4.87e6,
         6.31e6,8.41e6,1.00e7,1.22e7,1.50e7,1.88e7,2.37e7,2.99e7,3.76e7,
         4.87e7,
         6.31e7,8.41e7,1.00e8,1.22e8,1.50e8,1.88e8,2.37e8,2.99e8,3.76e8,
         4.87e8,
         6.31e8,8.41e8,1.00e9
    ]
    YM5S = [0.0,1.84e-4,4.98e-4,7.77e-4,1.02e-3,1.25e-3,1.44e-3,
         1.62e-3,1.78e-3,1.92e-3,
         2.16e-3,2.37e-3,2.53e-3,2.67e-3,2.79e-3,2.93e-3,3.04e-3,3.12e-3,
         3.18e-3,3.21e-3,
         3.23e-3,3.21e-3,3.16e-3,3.09e-3,2.99e-3,2.86e-3,2.70e-3,2.53e-3,
         2.36e-3,2.19e-3,
         1.99e-3,1.83e-3,1.71e-3,1.52e-3,1.34e-3,1.16e-3,9.92e-4,8.50e-4,
         7.27e-4,6.10e-4,
         5.14e-4,4.28e-4,3.85e-4,3.42e-4,3.06e-4,2.73e-4,2.47e-4,2.26e-4,
         2.11e-4,1.98e-4,
         1.91e-4,1.86e-4,1.86e-4,1.87e-4,1.89e-4,1.93e-4,1.98e-4,2.04e-4,
         2.11e-4,2.20e-4,
         2.29e-4,2.40e-4,2.47e-4,2.55e-4,2.63e-4,2.72e-4,2.81e-4,2.91e-4,
         3.00e-4,3.11e-4,
         3.22e-4,3.34e-4,3.41e-4,3.50e-4,3.58e-4,3.68e-4,3.77e-4,3.87e-4,
         3.97e-4,4.08e-4,
         4.18e-4,4.31e-4,4.38e-4
    ]
    #
    # EX#ITATION  UNITS OF 10**-18#M**2
    #
    # 1S5 METASTABLE E=8.3153155 EV  J=2
    # SHAPE FUN#TION BELOW 11EV FROM BARTS#HAT ANe ZATSARINNY
    # ABOVE 100EV S#ALEe BY 1/E**3

    X1S5 = [8.3153,8.35,8.40,8.44,8.48,8.52,8.56,8.60,8.65,8.70,
         8.75,8.80,8.85,8.90,8.95,9.00,9.05,9.10,9.15,9.20,
         9.25,9.30,9.35,9.40,9.45,9.50,9.516,9.52,9.525,9.53,
         9.54,9.545,9.55,9.555,9.56,9.57,9.58,9.59,9.60,9.61,
         9.615,9.62,9.625,9.63,9.64,9.65,9.66,9.67,9.68,9.70,
         9.75,10.0,10.5,11.0,11.5,12.0,12.5,13.0,14.0,15.0,
         16.0,18.0,20.0,25.0,30.0,40.0,50.0,60.0,80.0,100.
    ]
    Y1S5 = [0.00,2.38,4.93,6.41,3.42,2.84,3.00,3.33,3.89,4.59,
         5.45,6.48,7.72,9.05,10.4,11.5,12.3,12.2,10.8,9.45,
         8.84,9.04,9.18,9.18,9.11,9.32,23.6,15.7,12.1,10.7,
         9.79,11.4,15.8,18.0,15.9,13.1,13.6,12.6,10.4,12.1,
         14.9,20.5,21.5,18.5,17.2,16.9,15.9,13.8,12.4,11.1,
         10.1,10.0,9.90,9.80,9.70,9.60,9.30,8.80,8.10,7.45,
         6.80,5.50,4.40,2.20,1.10,.500,.230,.150,.065,.034
    ]
    YP1S5 = np.zeros(70)
    # 1S4 E=8.4365236 EV J=1  RESONAN#E RAeIATION 146.96 NM       F=0.260
    #    USEe BEF S#ALING ABOVE 11.0EV
    # SHAPE FUN#TION BELOW 11EV FROM BARTS#HAT ANe ZATSARINNY

    X1S4 = [8.4365,8.45,8.46,8.47,8.48,8.49,8.50,8.52,8.54,8.56,
         8.60,8.65,8.70,8.75,8.80,8.85,8.90,8.95,9.00,9.05,
         9.10,9.15,9.20,9.25,9.30,9.35,9.40,9.45,9.50,9.55,
         9.60,9.62,9.65,9.70,9.75,9.80,10.0,11.0
    ]
    Y1S4 = [0.00,2.60,5.60,6.09,5.50,4.72,4.27,3.70,3.42,3.24,
         3.10,3.02,3.34,3.70,4.25,5.03,6.00,7.23,8.70,9.67,
         10.3,10.1,9.37,9.00,8.70,8.55,8.62,8.77,9.00,10.1,
         10.5,10.7,10.2,9.22,9.40,9.60,10.8,16.87
    ]
    YP1S4 = np.zeros(38)
    # 1S3  METASTABLE   E=9.4471945 EV J=0
    # SHAPE FUN#TION BELOW 11EV FROM BARTS#AT ANe ZATSARINNY
    # ABOVE 100EV SCALED BY 1/E**3

    X1S3 = [9.4472,9.45,9.47,9.48,9.49,9.50,9.506,9.51,9.52,9.525,
         9.53,9.54,9.55,9.555,9.56,9.57,9.58,9.60,9.62,9.64,
         9.67,9.68,9.69,9.70,9.71,9.72,9.73,9.74,9.75,9.80,
         10.0,11.0,12.0,13.0,14.0,15.0,16.0,18.0,20.0,24.0,
         30.0,40.0,50.0,60.0,80.0,100.
    ]
    Y1S3 = [0.00,.313,.324,.230,.360,1.67,3.78,2.57,1.26,1.71,
         1.80,1.78,2.23,2.70,2.43,.635,1.14,1.04,1.49,1.59,
         1.62,2.77,3.89,6.21,9.38,8.28,6.75,4.29,3.97,.556,
         0.77,3.30,4.30,4.50,4.30,3.70,3.30,2.65,2.25,1.50,
         0.80,0.32,0.17,0.10,.040,.021
    ]
    YP1S3 = np.zeros(46)
    # 1S2 E=9.5697248 EV J=1 RESONAN#E RAeIATION 129.56 NM        F=0.183
    #   USEe BEF S#ALING ABOVE 11.0EV
    # SHAPE FUN#TION BELOW 11EV FROM BARTS#HAT ANe ZATSARINNY

    X1S2 = [9.5697,9.58,9.59,9.60,9.61,9.62,9.63,9.64,9.65,9.67,
         9.68,9.69,9.70,9.75,9.77,9.80,9.85,9.90,10.0,11.0
    ]
    Y1S2 = [0.00,1.21,1.32,1.41,1.41,1.30,1.88,2.00,2.02,2.02,
         2.83,2.11,2.07,1.78,2.10,1.96,1.75,1.87,2.17,5.305
    ]
    YP1S2 = np.zeros(20)
    # 2P10 E=9.5801524 EV  J=1
    # ABOVE 100EV S#ALEe BY 1/E**3

    X2P10 = [9.5802,9.80,10.0,10.5,11.0,11.5,12.0,12.5,13.0,14.0,
         15.0,16.0,18.0,20.0,25.0,30.0,35.0,40.0,50.0,60.0,
         80.0,100.
    ]
    Y2P10 = [0.00,0.69,1.23,2.34,3.15,3.73,4.14,4.41,4.59,4.76,
         4.74,4.63,4.26,3.84,2.91,2.23,1.75,1.40,0.95,0.69,
         .406,.267
    ]
    YP2P10 = np.zeros(22)
    # 2P9 E=9.6856199 EV  J=2
    # ABOVE 100EV S#ALEe BY 1/E

    X2P9 = [9.6856,10.0,10.5,11.0,11.5,12.0,12.5,13.0,14.0,15.0,
         16.0,18.0,20.0,25.0,30.0,35.0,40.0,50.0,60.0,80.0,
         100.
    ]
    Y2P9 = [0.00,1.50,3.37,4.49,5.47,6.04,6.48,6.91,7.41,7.49,
         7.41,6.98,6.26,5.04,4.17,3.52,3.09,2.52,2.08,1.58,
         1.22
    ]
    YP2P9 = np.zeros(21)
    # 2P8 E=9.7207401 EV  J=3
    # ABOVE 100EV S#ALEe BY 1/E**3

    X2P8 = [9.7207,10.0,10.5,11.0,11.5,12.0,12.5,13.0,13.5,14.0,
         15.0,16.0,18.0,20.0,25.0,30.0,35.0,40.0,50.0,60.0,
         80.0,100.
    ]
    Y2P8 = [0.00,1.16,2.78,3.88,4.86,5.44,5.83,6.02,6.35,6.41,
         6.48,6.33,4.89,3.24,1.51,0.72,0.43,0.26,0.11,.061,
         .021,.0093
    ]
    YP2P8 = np.zeros(22)
    # 2P7 E=9.7892996 EV  J=1
    # ABOVE 100EV S#ALEe BY 1/E**2

    X2P7 = [9.7893,10.0,10.5,11.0,11.5,12.0,12.5,13.0,13.5,14.0,
         15.0,16.0,18.0,20.0,25.0,30.0,35.0,40.0,50.0,60.0,
         80.0,100.
    ]
    Y2P7 = [0.00,0.66,1.68,2.52,3.12,3.48,3.72,3.90,4.02,4.14,
         4.20,4.20,3.90,3.48,2.64,1.80,1.26,0.96,0.63,0.42,
         0.24,0.15
    ]
    YP2P7 = np.zeros(22)
    # 2P6 E=9.8210934 EV  J=2
    # ABOVE 100EV S#ALEe BY 1/E

    X2P6 = [9.8211,10.0,10.5,11.0,11.5,12.0,12.5,13.0,13.5,14.0,
         15.0,16.0,18.0,20.0,25.0,30.0,35.0,40.0,50.0,60.0,
         80.0,100.
    ]
    Y2P6 = [0.00,0.26,1.05,1.47,1.92,2.19,2.32,2.43,2.53,2.62,
         2.64,2.88,3.06,2.94,2.70,2.10,1.68,1.53,1.26,1.02,
         0.78,0.60
    ]
    YP2P6 = np.zeros(22)
    # 3e6 E=9.8903760 EV  J=0
    # ABOVE 100EV S#ALEe BY 1/E**1.5

    X3D6 = [9.8904,10.0,10.5,11.0,11.5,12.0,12.5,13.0,13.5,14.0,
         14.5,15.0,16.0,17.0,18.0,20.0,22.0,25.0,30.0,40.0,
         50.0,60.0,80.0,100.
    ]
    Y3D6 = [0.00,0.23,0.83,1.50,2.17,2.77,3.22,3.60,3.90,4.20,
         4.42,4.65,4.80,5.02,5.02,4.80,4.50,3.90,2.78,1.87,
         1.35,1.01,0.66,0.48
    ]
    YP3D6 = np.zeros(24)
    #
    # 3e5 E=9.9170761 EV J=1 RESONA#E RAeIATION 125.02 NM         F=0.010
    #
    # 2P5 E=9.9334847 EV  J=0
    # ABOVE 100EV S#ALEe BY 1/E

    X2P5 = [9.9335,13.0,16.0,17.5,20.0,24.0,26.0,28.0,30.0,35.0,
         40.0,50.0,60.0,80.0,100.
    ]
    Y2P5 = [0.00,1.60,2.16,2.70,4.26,7.32,8.46,8.88,8.70,8.40,
         7.50,5.70,4.80,3.60,3.00
    ]
    YP2P5 = np.zeros(15)
    # 3e4! E=9.9431141 EV  J=4
    # ABOVE 100EV S#ALEe BY 1/E**1.5

    X3D4P = [9.9431,10.0,10.5,11.0,11.5,12.0,12.5,13.0,13.5,14.0,
         14.5,15.0,16.0,17.0,18.0,20.0,22.0,25.0,30.0,40.0,
         50.0,60.0,80.0,100.
    ]
    Y3D4P = [0.00,0.45,1.65,3.00,4.35,5.55,6.45,7.20,7.80,8.40,
         8.85,9.30,9.60,10.1,10.1,9.60,9.00,7.80,5.77,3.75,
         2.70,2.03,1.32,0.96
    ]
    YP3D4P = np.zeros(24)
    # 3e3 E=9.9587506 EV  J=2
    # ABOVE 100EV S#ALEe BY 1/E**1.5

    X3D3 = [9.9588,10.0,10.5,11.0,11.5,12.0,12.5,13.0,13.5,14.0,
         14.5,15.0,16.0,17.0,18.0,20.0,22.0,25.0,30.0,40.0,
         50.0,60.0,80.0,100.
    ]
    Y3D3 = [0.00,0.48,1.76,3.20,4.64,5.92,6.88,7.68,8.32,8.96,
         9.44,9.92,10.2,10.7,10.7,10.2,9.60,8.32,5.92,4.00,
         2.88,2.16,1.41,1.03
    ]
    YP3D3 = np.zeros(24)
    # 3e4 E=10.039054 EV  J=3
    # ABOVE 100EV S#ALEe BY 1/E**2

    X3D4 = [10.0391,10.2,10.5,10.7,11.0,11.2,11.5,12.0,12.5,13.0,
         13.5,14.0,14.5,15.0,16.0,18.0,20.0,22.0,25.0,30.0,
         35.0,40.0,50.0,60.0,80.0,100.
    ]
    Y3D4 = [0.00,0.50,1.50,2.20,3.30,4.00,5.00,6.90,8.70,10.7,
         12.2,13.3,13.6,13.6,12.8,10.2,9.00,7.30,5.70,3.40,
         2.90,2.20,1.45,1.00,0.56,0.36
    ]
    YP3D4 = np.zeros(26)
    # 3e1!! E=10.157469 EV  J=2
    # ABOVE 100EV S#ALEe BY 1/E**3

    X3D1PP = [10.1575,10.5,10.7,11.0,11.5,12.0,12.5,13.0,13.5,14.0,
         14.5,15.0,16.0,18.0,20.0,22.0,25.0,30.0,40.0,50.0,
         60.0,80.0,100.
    ]
    Y3D1PP = [0.00,0.70,1.30,2.00,3.20,4.50,5.70,6.80,7.80,8.30,
         8.50,8.50,8.20,6.70,5.30,3.80,2.90,1.55,0.67,0.35,
         0.20,.085,.044
    ]
    YP3D1PP = np.zeros(23)
    # 3e1! E=10.220042  J=3
    # ABOVE 100EV S#ALEe BY 1/E

    X3D1P = [10.2200,10.7,11.0,11.5,12.0,12.5,13.0,13.5,14.0,14.5,
         15.0,16.0,18.0,20.0,22.0,25.0,30.0,40.0,50.0,60.0,
         80.0,100.
    ]
    Y3D1P = [0.00,0.60,1.04,1.83,2.39,3.00,3.39,3.65,3.83,3.94,
         4.00,4.00,3.95,3.85,3.70,3.45,2.90,2.15,1.70,1.45,
         1.08,.875
    ]
    YP3D1P = np.zeros(22)
    #
    # 3e2 E=10.401030  J=1 RESONAN#E RAeIATION  119.20 NM         F=0.379
    #
    # 2S5  E=10.562062 EV  J=2 NOT OBSERVEe  USE 1S5 S#ALEe BY 0.25
    # ABOVE 100EV S#ALEe BY 1/E**3

    X2S5 = [10.5621,11.0,11.5,12.0,12.5,13.0,14.0,15.0,16.0,18.0,
         20.0,25.0,30.0,40.0,50.0,60.0,80.0,100.
    ]
    Y2S5 = [0.00,0.10,0.25,0.50,1.00,1.50,2.02,1.75,1.70,1.37,
         1.10,.550,.275,.125,.057,.037,.016,.0085
    ]
    YP2S5 = np.zeros(18)
    #
    # 2S4  E=10.593211 EV  J=1  RESONAN#E RAeIATION 117.04 NM     F=0.086
    #
    # 3P10+3P9+3P8+3P7+3P6+3P5  E=10.9016 EV S#ALEe SUM OF 2P10--2P5 BY 0.25
    # ABOVE 100EV S#ALEe BY 1/E

    X3P105 = [10.9016,11.50,12.0,12.5,13.0,14.0,15.0,16.0,18.0,20.0,
         25.0,30.0,35.0,40.0,50.0,60.0,80.0,100.
    ]
    Y3P105 = [0.00,1.00,2.70,3.42,4.20,5.10,5.70,5.94,5.93,5.52,
         5.31,4.71,4.09,3.54,2.68,2.18,1.59,1.26
    ]
    YP3P105 = np.zeros(18)
    # 2P4 E=10.957614 J=1
    # ABOVE 100EV S#ALEe BY 1/E**2

    X2P4 = [10.9576,13.0,14.0,15.0,16.0,18.0,20.0,25.0,30.0,40.0,
         50.0,60.0,80.0,100.
    ]
    Y2P4 = [0.00,0.75,1.10,1.20,1.10,0.75,0.60,0.38,0.25,.145,
         .095,.065,.037,.025
    ]
    YP2P4 = np.zeros(14)
    # 4e6+4e3+4e4!+4e4+4e1!!+4e1!  SUM 4e  E=10.9715
    #       SHAPE FROM PETROV NORMALISEe TO HAYASHI TOTAL
    # ABOVE 100EV S#ALEe BY 1/E**3

    X4DSUM = [10.9715,12.0,13.0,14.0,15.0,16.0,18.0,20.0,25.0,30.0,
         35.0,40.0,50.0,60.0,80.0,100.
    ]
    Y4DSUM = [0.00,1.50,4.35,4.65,4.50,4.05,3.00,2.25,0.96,0.57,
         0.36,0.21,.099,.060,.024,.011
    ]
    YP4DSUM = np.zeros(16)
    #
    # 4e5 E=10.978772 J=1 RESONAN#E RAeIATION AT 112.93 NM        F=0.001
    #
    # 2P3 E=11.054723  J=2
    # ABOVE 100 EV S#ALEe BY 1/E

    X2P3 = [11.0547,13.0,14.0,15.0,16.0,18.0,20.0,25.0,30.0,40.0,
         50.0,60.0,80.0,100.
    ]
    Y2P3 = [0.00,2.20,3.00,3.50,3.60,3.50,3.20,2.60,2.20,1.65,
         1.35,1.10,0.83,0.65
    ]
    YP2P3 = np.zeros(14)
    # 2P2 E=11.069148  J=1
    # ABOVE 100EV S#ALEe BY 1/E**2

    X2P2 = [11.0691,13.0,14.0,15.0,16.0,18.0,20.0,25.0,30.0,40.0,
         50.0,60.0,80.0,100.
    ]
    Y2P2 = [0.00,0.75,1.00,1.08,1.08,0.97,0.85,0.56,0.40,0.22,
         .145,.100,.054,.035
    ]
    YP2P2 = np.zeros(14)
    # 2P1 E=11.141221  J=0
    # ABOVE 100EV S#ALEe BY 1/E

    X2P1 = [11.1412,13.0,14.0,15.0,16.0,18.0,20.0,25.0,30.0,35.0,
         40.0,50.0,60.0,80.0,100.
    ]
    Y2P1 = [0.00,0.80,1.50,1.90,1.90,1.80,1.60,1.30,1.05,0.91,
         0.77,0.64,0.52,0.39,0.31
    ]
    YP2P1 = np.zeros(15)
    #
    # 4e2 E=11.162564 EV  J=1 RESONAN#E RAeIATION AT 111.07 NM    F=0.0835
    # 3S4 E=11.274184 EV  J=1 RESONAN#E RAeIATION AT 109.97 NM    F=0.0225
    # 5e5 E=11.422451 EV  J=1 RESONAN#E RAeIATION AT 108.55 NM    F=0.0227
    # 5e2 E=11.495075 EV  J=1 RESONAN#E RAeIATION AT 107.86 NM    F=0.002
    # 4S4 E=11.582864 EV  J=1 RESONAN#E RAeIATION AT 107.04 NM    F=0.0005
    # 3S1! E=11.60718 EV  J=1 RESONAN#E RAeIATION AT 106.82 NM    F=0.1910
    # 6e5 E=11.682783 EV  J=1 RESONAN#E RAeIATION AT 106.13 NM    F=0.0088
    # 6e2 E=11.739501 EV  J=1 RESONAN#E RAeIATION AT 105.61 NM    F=0.0967
    # 5S4 E=11.752100 EV  J=1 RESONAN#E RAeIATION AT 105.50 NM    F=0.0288
    # 7e5 E=11.806816 EV  J=1 RESONAN#E RAeIATION AT 105.01 NM    F=0.0042
    # 7e2 E=11.84030  EV  J=1 RESONAN#E RAeIATION AT 104.71 NM    F=0.0625
    # 6S4 E=11.85177  EV  J=1 RESONAN#E RAeIATION AT 104.61 NM    F=0.0025
    # 2S2 E=11.877758 EV  J=1 RESONAN#E RAeIATION AT 104.38 NM    F=0.029
    # 8e5 E=11.891681 EV  J=1 RESONAN#E RAeIATION AT 104.26 NM    F=0.0035
    # 8e2 E=11.90816  EV  J=1 RESONAN#E RAeIATION AT 104.12 NM    F=0.0386
    # 7S4 E=11.91770  EV  J=1 RESONAN#E RAeIATION AT 104.03 NM    F=0.005
    # 9e5 E=11.94156  EV  J=1 RESONAN#E RAeIATION AT 103.83 NM    F=0.0005
    # 9e2 E=11.95502  EV  J=1 RESONAN#E RAeIATION AT 103.71 NM    F=0.025
    # 8S4 E=11.96207  EV  J=1 RESONAN#E RAeIATION AT 103.64 NM    F=0.0023
    # 10e5 E=11.978893 EV J=1 RESONAN#E RAeIATION AT 103.50 NM    F=0.0005
    # 10e2 E=11.98858 EV  J=1 RESONAN#E RAeIATION AT 103.42 NM    F=0.0164
    # 9S4 E=11.993947 EV  J=1 RESONAN#E RAeIATION AT 103.37 NM    F=0.0014
    # SUM HIGHER STATES E=12.0 EV                                 F=0.0831
    #
    # TOTAL OS#ILLATOR SUM =1.650
    #
    # BREMSSTRAHLUNG X-SE#TION WITH #UT OFF UNITS 10**-24

    Z54T = [4948.,4086.,2921.,2088.,1396.,776.,492.,328.,220.,189.,
         179.7,178.6,179.0,179.3,179.6,180.2,180.3,181.5,182.1,182.7,
         183.6,184.4,184.7,185.5,185.7
    ]
    EBRM = [1000.,2000.,5000.,1.E4,2.E4,5.E4,1.E5,2.E5,5.E5,1.E6,
         2.E6,3.E6,4.E6,5.E6,6.E6,8.E6,1.E7,1.5E7,2.E7,3.E7,
         4.E7,5.E7,6.E7,8.E7,1.E8]


    #   BORN BETHE VALUES FOR IONISATION
    CONST = 1.873884e-20
    EMASS2 = 1021997.804
    API = acos(-1)
    A0 = 0.52917720859e-8
    RY = 13.60569193
    BBCONST = 16.0 * API * A0 * A0 * RY * RY / EMASS2

    AM2 = 8.04
    C = 75.25

    # AVERAGE AUGER EMISSIONS FROM EACH SHELL
    AUGM5 = 4.34
    AUGM4 = 4.43
    AUGM3 = 6.79
    AUGM2 = 6.85
    AUGM1 = 7.94
    AUGL3 = 8.21
    AUGL2 = 8.45
    AUGL1 = 9.39
    AUGK = 8.49

    object.NION = 12
    object.NATT = 1
    object.NIN = 50
    object.NNULL = 0
    NBREM = 25

    cdef int J, I

    for J in range(6):
        object.KEL[J] = object.NANISO
    for J in range(object.NIN):
        object.KIN[J] = object.NANISO
    cdef int NDATA, NEL, NEPSI, NIONG, NION2, NION3, NION4, NION5, NION6, NIONK, NIONL1, NIONL2, NIONL3, NIONM1, NIONM2, NIONM3, NIONM4
    cdef int NIONM5, N1S5, N1S4, N1S3, N1S2, N2P10, N2P9, N2P8, N2P7, N2P6, N3D6, N2P5, N3D4P, N3D3, N3D4, N3D1PP, N3D1P, N2S5, N3PSUM, N2P4
    cdef int N4DSUM, N2P3, N2P2, N2P1
    NDATA = 182
    NEL = 153
    NEPSI = 182
    NIONG = 76
    NION2 = 54
    NION3 = 47
    NION4 = 42
    NION5 = 37
    NION6 = 35
    NIONK = 60
    NIONL1 = 76
    NIONL2 = 76
    NIONL3 = 76
    NIONM1 = 79
    NIONM2 = 80
    NIONM3 = 80
    NIONM4 = 82
    NIONM5 = 83
    N1S5 = 70
    N1S4 = 38
    N1S3 = 46
    N1S2 = 20
    N2P10 = 22
    N2P9 = 21
    N2P8 = 22
    N2P7 = 22
    N2P6 = 22
    N3D6 = 24
    N2P5 = 15
    N3D4P = 24
    N3D3 = 24
    N3D4 = 26
    N3D1PP = 23
    N3D1P = 22
    N2S5 = 18
    N3PSUM = 18
    N2P4 = 14
    N4DSUM = 16
    N2P3 = 14
    N2P2 = 14
    N2P1 = 15
    cdef double EMASS = 9.10938291e-31
    cdef double AMU = 1.660538921e-27
    object.E = [0.0, 1.0, 12.129843, 0.0, 0.0, 23.7]
    object.E[1] = 2.0 * EMASS / (131.30 * AMU)
    cdef double EOBY[12]

    EOBY[0:12] = [8.7, 20.0, 38.0, 400., 410., 750.0, 800.0, 920.0, 3850., 4100., 4400., 34561.]
    object.EION[0:12] = [12.129843, 33.105, 64.155, 676.4, 689.0, 940.6, 1002.1, 1148.7, 4786., 5107., 5453., 34561.]
    # FLUORESCENCE DATA
    object.NC0[0:12] = [0, 1, 2, 4, 4, 7, 7, 8, 9, 9, 10, 17]
    object.EC0[0:12] = [0.0, 5.0, 10.0, 593.7, 604.0, 782.2, 839.7, 911.4, 4494.3, 4774.8, 5015.2, 33900]
    cdef double WKLM[12]
    WKLM = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0942, 0.093, 0.0475, 0.89]
    object.WK[0:12] = WKLM
    object.EFL[0:12] = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4106, 4427, 4483, 29775]
    object.NG1[0:12] = [0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 8]
    object.EG1[0:12] = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3900, 4181, 4233, 29406]
    object.NG2[0:12] = [0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 6, 9]
    object.EG2[0:12] = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 594, 594, 782, 4494]

    for J in range(object.NION):
        for I in range(4000):
            if object.EG[I] > object.EION[J]:
                IOFFION[J] = I - 1
                break

    object.EIN[0:51] = [8.3153, 8.4365, 9.4472, 9.5697, 9.5802, 9.6856, 9.7207, 9.7893, 9.8211, 9.8904, 9.9171, 9.9335,
                        9.9431, 9.9588, 10.0391, 10.1575, 10.2200, 10.4010, 10.5621, 10.5932, 10.9016, 10.9576, 10.9715,
                        10.9788, 11.0547, 11.0691, 11.1412, 11.1626, 11.2742, 11.4225, 11.4951, 11.5829, 11.6072,
                        11.6828, 11.7395, 11.7521, 11.8068, 11.8403, 11.8518, 11.8778, 11.8917, 11.9082, 11.9177,
                        11.9416, 11.9550, 11.9621, 11.9789, 11.9886, 11.9939, 12.0, 0.0]
    for I in range(51, 250):
        object.EIN[I] = 0.0

    cdef int NL
    for NL in range(object.NIN):
        object.PENFRA[0][NL] = 0.0
        # PENNING TRANSFER DISTANCE MICRONS
        object.PENFRA[1][NL] = 1.0
        # PENNING TRANSFER TIME PICOSECONDS
        object.PENFRA[2][NL] = 1.0

    for NL in range(object.NIN):
        for I in range(4000):
            if object.EG[I] > object.EIN[NL]:
                IOFFN[NL] = I - 1
                break
    object.NSTEP = 4000


    for I in range(object.NSTEP):
        EN = object.EG[I]
        if EN > object.EIN[0]:
            GAMMA1 = (EMASS2 + 2.0 * EN) / EMASS2
            GAMMA2 = GAMMA1 * GAMMA1
            BETA = sqrt(1.0 - 1.0 / GAMMA2)
            BETA2 = BETA * BETA

        if EN <= XEN[1]:
            QELA = 122.e-16
            QMOM = 122.e-16
        else:
            QELA = GasUtil.QLSCALE(EN, NEL, YEL, XEL)
            QMOM = GasUtil.QLSCALE(EN, NDATA, YMOM, XEN)

        TEMP = GasUtil.CALPQ3(EN, NEPSI, YEPS, XEPS)

        PQ = [0.5, 0.5 + (QELA - QMOM) / QELA, 1 - TEMP]

        object.PEQEL[1][I] = PQ[object.NANISO]

        object.Q[1][I] = QELA

        if object.NANISO == 0:
            object.Q[1][I] = QMOM
        #  IONISATION CHARGE STATE =1


        object.QION[0][I] = 0.0
        object.PEQION[0][I] = 0.5
        if object.NANISO == 2:
            object.PEQION[0][I] = 0
        if EN >= object.EION[0]:
            object.QION[0][I] = GasUtil.CALQIONX(EN, NIONG, YIN1, XION, BETA2, 0.8061, CONST, object.DEN[I], C, AM2)


        # USE ANISOTROPIC SCATTERING FOR PRIMARY IONISATION ELECTRON FOR
        # ENERGIES ABOVE 2 * IONISATION ENERGY
        # ANISOTROPIC ANGULAR DISTRIBUTION SAME AS ELASTIC AT ENERGY OFF SET BY
        # IONISATION ENERGY
        if EN > (2 * object.EION[0]):
            object.PEQION[0][I] = object.PEQEL[1][I - IOFFION[0]]

        #  IONISATION CHARGE STATE =2
        object.QION[1][I] = 0.0
        object.PEQION[1][I] = 0.5
        if object.NANISO == 2:
            object.PEQION[1][I] = 0
        if EN >= object.EION[1]:
            object.QION[1][I] = GasUtil.CALQIONX(EN, NION2, YIN2, XIN2, BETA2, 0.1133, CONST, object.DEN[I], C, AM2)

        # USE ANISOTROPIC SCATTERING FOR PRIMARY IONISATION ELECTRON FOR
        # ENERGIES ABOVE 2 * IONISATION ENERGY
        # ANISOTROPIC ANGULAR DISTRIBUTION SAME AS ELASTIC AT ENERGY OFF SET BY
        # IONISATION ENERGY
        if EN > (2 * object.EION[1]):
            object.PEQION[1][I] = object.PEQEL[1][I - IOFFION[1]]

        #  IONISATION CHARGE STATE =3
        object.QION[2][I] = 0.0
        object.PEQION[2][I] = 0.5
        if object.NANISO == 2:
            object.PEQION[2][I] = 0
        if EN >= object.EION[2]:
            object.QION[2][I] = GasUtil.CALQIONX(EN, NION3, YIN3, XIN3, BETA2, 0.05496, CONST, object.DEN[I], C, AM2)
        # USE ANISOTROPIC SCATTERING FOR PRIMARY IONISATION ELECTRON FOR
        # ENERGIES ABOVE 2 * IONISATION ENERGY
        # ANISOTROPIC ANGULAR DISTRIBUTION SAME AS ELASTIC AT ENERGY OFF SET BY
        # IONISATION ENERGY
        if EN > (2 * object.EION[2]):
            object.PEQION[2][I] = object.PEQEL[2][I - IOFFION[2]]

        Q456 = 0.0
        if EN > 106.35:
            TEMP = GasUtil.CALQION(EN, NION4, YIN4, XIN4)
            Q456 = TEMP * 4.0 / 3.0
        if EN > 160.45:
            TEMP = GasUtil.CALQION(EN, NION5, YIN5, XIN5)
            Q456 += (TEMP * 5.0 / 3.0)
        if EN > 227.2:
            TEMP = GasUtil.CALQION(EN, NION6, YIN6, XIN6)
            Q456 += (TEMP * 6.0 / 3.0)

        if EN > XIN4[NION4 - 1] or EN > XIN5[NION5 - 1] or EN > XIN6[NION6 - 1]:
            X2 = 1.0 / BETA2
            X1 = X2 * log(BETA2 / (1.0 - BETA2)) - 1.0
            #  0.3629 = .01959*4/3 + .004597*5/3  + .002504*6/3
            Q456 = CONST * (AM2 * (X1 - object.DEN[I] / 2.0) + C * X2) * 0.03629

        object.QION[2][I] += Q456

        #M5-SHELL IONISATION
        object.QION[3][I] = 0.0
        object.PEQION[3][I] = 0.5
        if object.NANISO == 2:
            object.PEQION[3][I] = 0
        if EN >= object.EION[3]:
            object.QION[3][I] = GasUtil.CALQION(EN, NIONM5, YM5S, XM5S)
            object.PEQION[3][I] = object.PEQEL[1][I - IOFFION[3]]

        #M4-SHELL IONISATION
        object.QION[4][I] = 0.0
        object.PEQION[4][I] = 0.5
        if object.NANISO == 2:
            object.PEQION[4][I] = 0
        if EN >= object.EION[4]:
            object.QION[4][I] = GasUtil.CALQION(EN, NIONM4, YM4S, XM4S)
            object.PEQION[4][I] = object.PEQEL[1][I - IOFFION[4]]

        #M3-SHELL IONISATION
        object.QION[5][I] = 0.0
        object.PEQION[5][I] = 0.5
        if object.NANISO == 2:
            object.PEQION[5][I] = 0
        if EN >= object.EION[5]:
            object.QION[5][I] = GasUtil.CALQION(EN, NIONM3, YM3S, XM3S)
            object.PEQION[5][I] = object.PEQEL[1][I - IOFFION[5]]

        #M2-SHELL IONISATION
        object.QION[6][I] = 0.0
        object.PEQION[6][I] = 0.5
        if object.NANISO == 2:
            object.PEQION[6][I] = 0
        if EN >= object.EION[6]:
            object.QION[6][I] = GasUtil.CALQION(EN, NIONM2, YM2S, XM2S)
            object.PEQION[6][I] = object.PEQEL[1][I - IOFFION[6]]

        #M1-SHELL IONISATION
        object.QION[7][I] = 0.0
        object.PEQION[7][I] = 0.5
        if object.NANISO == 2:
            object.PEQION[7][I] = 0
        if EN >= object.EION[7]:
            object.QION[7][I] = GasUtil.CALQION(EN, NIONM1, YM1S, XM1S)
            object.PEQION[7][I] = object.PEQEL[1][I - IOFFION[7]]

        #L3-SHELL IONISATION
        object.QION[8][I] = 0.0
        object.PEQION[8][I] = 0.5
        if object.NANISO == 2:
            object.PEQION[8][I] = 0
        if EN >= object.EION[8]:
            object.QION[8][I] = GasUtil.CALQION(EN, NIONL3, YL3S, XL3S)
            object.PEQION[8][I] = object.PEQEL[1][I - IOFFION[8]]

        #L2-SHELL IONISATION
        object.QION[9][I] = 0.0
        object.PEQION[9][I] = 0.5
        if object.NANISO == 2:
            object.PEQION[9][I] = 0
        if EN >= object.EION[9]:
            object.QION[9][I] = GasUtil.CALQION(EN, NIONL2, YL2S, XL2S)
            object.PEQION[9][I] = object.PEQEL[1][I - IOFFION[9]]

        #L1-SHELL IONISATION
        object.QION[10][I] = 0.0
        object.PEQION[10][I] = 0.5
        if object.NANISO == 2:
            object.PEQION[10][I] = 0
        if EN >= object.EION[10]:
            object.QION[10][I] = GasUtil.CALQION(EN, NIONL1, YL1S, XL1S)
            object.PEQION[10][I] = object.PEQEL[1][I - IOFFION[10]]

        #K-SHELL IONISATION
        object.QION[11][I] = 0.0
        object.PEQION[11][I] = 0.5
        if object.NANISO == 2:
            object.PEQION[11][I] = 0
        if EN >= object.EION[11]:
            object.QION[11][I] = GasUtil.CALQION(EN, NIONK, YKSH, XKSH)
            object.PEQION[11][I] = object.PEQEL[1][I - IOFFION[11]]

        # ATTACHMENT
        object.Q[3][I] = 0.0
        object.QATT[3][I] = object.Q[3][I]

        # COUNTING IONISATION
        object.Q[4][I] = 0.0
        object.PEQEL[4][I] = 0.5
        if object.NANISO == 2:
            object.PEQEL[4][I] = 0.0
        if EN > object.EION[0]:
            object.Q[4][I] = GasUtil.CALQIONX(EN, NIONG, YINC, XION, BETA2, 1.0, CONST, object.DEN[I], C, AM2)

        # CORRECTION TO CHARGE STATE 1 2 3+4+5+6 X-SECTION FOR K L AND M SHELLS
        # CORRECTION GIVES TOTAL IONISATION EQUAL TO OSCILLATOR SUM
        QTEMP = 0.0
        for J in range(4, 12):
            QTEMP += object.QION[J][I]

        if object.Q[4][I] == 0.0:
            QCORR = 1.0
        else:
            QCORR = (object.Q[4][I] - QTEMP) / object.Q[4][I]
        object.QION[0][I] *= QCORR
        object.QION[1][I] *= QCORR
        object.QION[2][I] *= QCORR

        object.Q[5][I] = 0.0

        for NL in range(object.NIN + 1):
            object.QIN[NL][I] = 0.0
            object.PEQIN[NL][I] = 0.5
            if object.NANISO == 2:
                object.PEQIN[NL][I] = 0.0

        #1S5
        if EN > object.EIN[0]:
            object.QIN[0][I] = GasUtil.CALQINP(EN, N1S5, Y1S5, X1S5, 3)
        if EN > (2 * object.EIN[0]):
            object.PEQIN[0][I] = object.PEQEL[1][I - IOFFN[0]]

        #1S4 F=0.260
        if EN > object.EIN[1]:
            if EN <= X1S4[N1S4]:
                object.QIN[1][I] = GasUtil.CALQIN(EN, N1S4, Y1S4, X1S4)
            else:
                object.QIN[1][I] = 0.260 / (object.EIN[1] * BETA2) * (
                        log(BETA2 * GAMMA2 * EMASS2 / (4.0 * object.EIN[1])) - BETA2 - object.DEN[
                    I] / 2.0) * BBCONST * EN / (EN + object.EIN[1] + object.E[2])
            if EN > (2 * object.EIN[1]):
                object.PEQIN[1][I] = object.PEQEL[1][I - IOFFN[1]]

        #1S3
        if EN > object.EIN[2]:
            object.QIN[2][I] = GasUtil.CALQINP(EN, N1S3, Y1S3, X1S3, 3)
        if EN > (2 * object.EIN[2]):
            object.PEQIN[2][I] = object.PEQEL[1][I - IOFFN[2]]

        #1S2 F=0.183
        if EN > object.EIN[3]:
            if EN <= X1S2[N1S2]:
                object.QIN[3][I] = GasUtil.CALQIN(EN, N1S2, Y1S2, X1S2)
            else:
                object.QIN[3][I] = 0.183 / (object.EIN[3] * BETA2) * (
                        log(BETA2 * GAMMA2 * EMASS2 / (4.0 * object.EIN[3])) - BETA2 - object.DEN[
                    I] / 2.0) * BBCONST * EN / (EN + object.EIN[3] + object.E[2])
            if EN > (2 * object.EIN[1]):
                object.PEQIN[3][I] = object.PEQEL[1][I - IOFFN[3]]

        #P STATES
        #2P10
        if EN > object.EIN[4]:
            object.QIN[4][I] = GasUtil.CALQINP(EN, N2P10, Y2P10, X2P10, 3)
        if EN > (2 * object.EIN[4]):
            object.PEQIN[4][I] = object.PEQEL[1][I - IOFFN[4]]

        #2P9
        if EN > object.EIN[5]:
            object.QIN[5][I] = GasUtil.CALQINP(EN, N2P9, Y2P9, X2P9, 1)
        if EN > (2 * object.EIN[5]):
            object.PEQIN[5][I] = object.PEQEL[1][I - IOFFN[5]]

        #2P8
        if EN > object.EIN[6]:
            object.QIN[6][I] = GasUtil.CALQINP(EN, N2P8, Y2P8, X2P8, 3)
        if EN > (2 * object.EIN[6]):
            object.PEQIN[6][I] = object.PEQEL[1][I - IOFFN[6]]

        #2P7
        if EN > object.EIN[7]:
            object.QIN[7][I] = GasUtil.CALQINP(EN, N2P7, Y2P7, X2P7, 2)
        if EN > (2 * object.EIN[7]):
            object.PEQIN[7][I] = object.PEQEL[1][I - IOFFN[7]]

        #2P6
        if EN > object.EIN[8]:
            object.QIN[8][I] = GasUtil.CALQINP(EN, N2P6, Y2P6, X2P6, 1)
        if EN > (2 * object.EIN[8]):
            object.PEQIN[8][I] = object.PEQEL[1][I - IOFFN[8]]

        #3D6
        if EN > object.EIN[9]:
            object.QIN[9][I] = GasUtil.CALQINP(EN, N3D6, Y3D6, X3D6, 1.5)
        if EN > (2 * object.EIN[9]):
            object.PEQIN[9][I] = object.PEQEL[1][I - IOFFN[9]]

        #3D5 F=0.0100
        if EN > object.EIN[10]:
            object.QIN[10][I] = 0.01 / (object.EIN[10] * BETA2) * (
                    log(BETA2 * GAMMA2 * EMASS2 / (4.0 * object.EIN[10])) - BETA2 - object.DEN[
                I] / 2.0) * BBCONST * EN / (EN + object.EIN[10] + object.E[2])
            if EN > (2 * object.EIN[10]):
                object.PEQIN[10][I] = object.PEQEL[1][I - IOFFN[10]]
        #2P5
        if EN > object.EIN[11]:
            object.QIN[11][I] = GasUtil.CALQINP(EN, N2P5, Y2P5, X2P5, 1)
        if EN > (2 * object.EIN[11]):
            object.PEQIN[11][I] = object.PEQEL[1][I - IOFFN[11]]

        #3D4!
        if EN > object.EIN[12]:
            object.QIN[12][I] = GasUtil.CALQINP(EN, N3D4P, Y3D4P, X3D4P, 1.5)
        if EN > (2 * object.EIN[12]):
            object.PEQIN[12][I] = object.PEQEL[1][I - IOFFN[12]]

        #3D3
        if EN > object.EIN[13]:
            object.QIN[13][I] = GasUtil.CALQINP(EN, N3D3, Y3D3, X3D3, 1.5)
        if EN > (2 * object.EIN[13]):
            object.PEQIN[13][I] = object.PEQEL[1][I - IOFFN[13]]

        #3D4
        if EN > object.EIN[14]:
            object.QIN[14][I] = GasUtil.CALQINP(EN, N3D4, Y3D4, X3D4, 2)
        if EN > (2 * object.EIN[14]):
            object.PEQIN[14][I] = object.PEQEL[1][I - IOFFN[14]]

        #3D1!!
        if EN > object.EIN[15]:
            object.QIN[15][I] = GasUtil.CALQINP(EN, N3D1PP, Y3D1PP, X3D1PP, 3)
        if EN > (2 * object.EIN[15]):
            object.PEQIN[15][I] = object.PEQEL[1][I - IOFFN[15]]

        #3D1!
        if EN > object.EIN[16]:
            object.QIN[16][I] = GasUtil.CALQINP(EN, N3D1P, Y3D1P, X3D1P, 1)
        if EN > (2 * object.EIN[16]):
            object.PEQIN[16][I] = object.PEQEL[1][I - IOFFN[16]]

        #3D2 F=0.379
        if EN > object.EIN[17]:
            object.QIN[17][I] = 0.379 / (object.EIN[17] * BETA2) * (
                    log(BETA2 * GAMMA2 * EMASS2 / (4.0 * object.EIN[17])) - BETA2 - object.DEN[
                I] / 2.0) * BBCONST * EN / (EN + object.EIN[17] + object.E[2])
            if EN > (2 * object.EIN[17]):
                object.PEQIN[17][I] = object.PEQEL[1][I - IOFFN[17]]

        #2S5
        if EN > object.EIN[18]:
            object.QIN[18][I] = GasUtil.CALQINP(EN, N2S5, Y2S5, X2S5, 3)
        if EN > (2 * object.EIN[18]):
            object.PEQIN[18][I] = object.PEQEL[1][I - IOFFN[18]]

        #2S4 J=1 F=0.086
        if EN > object.EIN[19]:
            object.QIN[19][I] = 0.086 / (object.EIN[19] * BETA2) * (
                    log(BETA2 * GAMMA2 * EMASS2 / (4.0 * object.EIN[19])) - BETA2 - object.DEN[
                I] / 2.0) * BBCONST * EN / (EN + object.EIN[19] + object.E[2])
            if EN > (2 * object.EIN[19]):
                object.PEQIN[19][I] = object.PEQEL[1][I - IOFFN[19]]

        #SUM 3P10+3P9+3P8+3P7+3P6+3P5
        if EN > object.EIN[20]:
            object.QIN[20][I] = GasUtil.CALQINP(EN, N3PSUM, Y3P105, X3P105, 1)
        if EN > (2 * object.EIN[20]):
            object.PEQIN[20][I] = object.PEQEL[1][I - IOFFN[20]]

        #2P4
        if EN > object.EIN[21]:
            object.QIN[21][I] = GasUtil.CALQINP(EN, N2P4, Y2P4, X2P4, 2)
        if EN > (2 * object.EIN[21]):
            object.PEQIN[21][I] = object.PEQEL[1][I - IOFFN[21]]

        #SUM 4D6+4D3+4D4P+4D4+4D1PP+4D1P
        if EN > object.EIN[22]:
            object.QIN[22][I] = GasUtil.CALQINP(EN, N4DSUM, Y4DSUM, X4DSUM, 3)
        if EN > (2 * object.EIN[22]):
            object.PEQIN[22][I] = object.PEQEL[1][I - IOFFN[22]]

        # 4D5 J=1 F=0.0010
        if EN > object.EIN[23]:
            object.QIN[23][I] = 0.001 / (object.EIN[23] * BETA2) * (
                    log(BETA2 * GAMMA2 * EMASS2 / (4.0 * object.EIN[23])) - BETA2 - object.DEN[
                I] / 2.0) * BBCONST * EN / (EN + object.EIN[23] + object.E[2])
            if EN > (2 * object.EIN[23]):
                object.PEQIN[23][I] = object.PEQEL[1][I - IOFFN[23]]

        #2P3
        if EN > object.EIN[24]:
            object.QIN[24][I] = GasUtil.CALQINP(EN, N2P3, Y2P3, X2P3, 1)

        #2P2
        if EN > object.EIN[25]:
            object.QIN[25][I] = GasUtil.CALQINP(EN, N2P2, Y2P2, X2P2, 2)

        #2P1
        if EN > object.EIN[26]:
            object.QIN[26][I] = GasUtil.CALQINP(EN, N2P1, Y2P1, X2P1, 1)

        # 4D2 J=1 F=0.0835
        if EN > object.EIN[27]:
            object.QIN[27][I] = 0.0835 / (object.EIN[27] * BETA2) * (
                    log(BETA2 * GAMMA2 * EMASS2 / (4.0 * object.EIN[27])) - BETA2 - object.DEN[
                I] / 2.0) * BBCONST * EN / (EN + object.EIN[27] + object.E[2])

            if EN > (2 * object.EIN[27]):
                object.PEQIN[27][I] = object.PEQEL[1][I - IOFFN[27]]

        # 3S4 J=1 F=0.0225
        if EN > object.EIN[28]:
            object.QIN[28][I] = 0.0225 / (object.EIN[28] * BETA2) * (
                    log(BETA2 * GAMMA2 * EMASS2 / (4.0 * object.EIN[28])) - BETA2 - object.DEN[
                I] / 2.0) * BBCONST * EN / (EN + object.EIN[28] + object.E[2])
            if EN > (2 * object.EIN[28]):
                object.PEQIN[28][I] = object.PEQEL[1][I - IOFFN[28]]

        # 5D5 J=1 F=0.0227
        if EN > object.EIN[29]:
            object.QIN[29][I] = 0.0227 / (object.EIN[29] * BETA2) * (
                    log(BETA2 * GAMMA2 * EMASS2 / (4.0 * object.EIN[29])) - BETA2 - object.DEN[
                I] / 2.0) * BBCONST * EN / (EN + object.EIN[29] + object.E[2])
            if EN > (2 * object.EIN[29]):
                object.PEQIN[29][I] = object.PEQEL[1][I - IOFFN[29]]

        # 5D2 J=1 F=0.002
        if EN > object.EIN[30]:
            object.QIN[30][I] = 0.002 / (object.EIN[30] * BETA2) * (
                    log(BETA2 * GAMMA2 * EMASS2 / (4.0 * object.EIN[30])) - BETA2 - object.DEN[
                I] / 2.0) * BBCONST * EN / (EN + object.EIN[30] + object.E[2])
            if EN > (2 * object.EIN[30]):
                object.PEQIN[30][I] = object.PEQEL[1][I - IOFFN[30]]

        # 4S4 J=1 F=0.0005
        if EN > object.EIN[31]:
            object.QIN[31][I] = 0.0005 / (object.EIN[31] * BETA2) * (
                    log(BETA2 * GAMMA2 * EMASS2 / (4.0 * object.EIN[31])) - BETA2 - object.DEN[
                I] / 2.0) * BBCONST * EN / (EN + object.EIN[31] + object.E[2])
            if EN > (2 * object.EIN[31]):
                object.PEQIN[31][I] = object.PEQEL[1][I - IOFFN[31]]

        # 3S1! J=1 F=0.1910
        if EN > object.EIN[32]:
            object.QIN[32][I] = 0.191 / (object.EIN[32] * BETA2) * (
                    log(BETA2 * GAMMA2 * EMASS2 / (4.0 * object.EIN[32])) - BETA2 - object.DEN[
                I] / 2.0) * BBCONST * EN / (EN + object.EIN[32] + object.E[2])
            if EN > (2 * object.EIN[32]):
                object.PEQIN[32][I] = object.PEQEL[1][I - IOFFN[32]]

        # 6D5 J=1 F=0.0088
        if EN > object.EIN[33]:
            object.QIN[33][I] = 0.0088 / (object.EIN[33] * BETA2) * (
                    log(BETA2 * GAMMA2 * EMASS2 / (4.0 * object.EIN[33])) - BETA2 - object.DEN[
                I] / 2.0) * BBCONST * EN / (EN + object.EIN[33] + object.E[2])
            if EN > (2 * object.EIN[33]):
                object.PEQIN[33][I] = object.PEQEL[1][I - IOFFN[33]]

        # 6D2 J=1 F=0.0967
        if EN > object.EIN[34]:
            object.QIN[34][I] = 0.0967 / (object.EIN[34] * BETA2) * (
                    log(BETA2 * GAMMA2 * EMASS2 / (4.0 * object.EIN[34])) - BETA2 - object.DEN[
                I] / 2.0) * BBCONST * EN / (EN + object.EIN[34] + object.E[2])
            if EN > (2 * object.EIN[34]):
                object.PEQIN[34][I] = object.PEQEL[1][I - IOFFN[34]]

        # 5S4 J=1 F=0.0967
        if EN > object.EIN[35]:
            object.QIN[35][I] = 0.0288 / (object.EIN[35] * BETA2) * (
                    log(BETA2 * GAMMA2 * EMASS2 / (4.0 * object.EIN[35])) - BETA2 - object.DEN[
                I] / 2.0) * BBCONST * EN / (EN + object.EIN[35] + object.E[2])
            if EN > (2 * object.EIN[35]):
                object.PEQIN[35][I] = object.PEQEL[1][I - IOFFN[35]]

        # 7D5 J=1 F=0.0042
        if EN > object.EIN[36]:
            object.QIN[36][I] = 0.0042 / (object.EIN[36] * BETA2) * (
                    log(BETA2 * GAMMA2 * EMASS2 / (4.0 * object.EIN[36])) - BETA2 - object.DEN[
                I] / 2.0) * BBCONST * EN / (EN + object.EIN[36] + object.E[2])
            if EN > (2 * object.EIN[36]):
                object.PEQIN[36][I] = object.PEQEL[1][I - IOFFN[36]]

        # 7D2 J=1 F=0.0625
        if EN > object.EIN[37]:
            object.QIN[37][I] = 0.0625 / (object.EIN[37] * BETA2) * (
                    log(BETA2 * GAMMA2 * EMASS2 / (4.0 * object.EIN[37])) - BETA2 - object.DEN[
                I] / 2.0) * BBCONST * EN / (EN + object.EIN[37] + object.E[2])
            if EN > (2 * object.EIN[37]):
                object.PEQIN[37][I] = object.PEQEL[1][I - IOFFN[37]]

        # 6S4 J=1 F=0.0025
        if EN > object.EIN[38]:
            object.QIN[38][I] = 0.0025 / (object.EIN[38] * BETA2) * (
                    log(BETA2 * GAMMA2 * EMASS2 / (4.0 * object.EIN[37])) - BETA2 - object.DEN[
                I] / 2.0) * BBCONST * EN / (EN + object.EIN[37] + object.E[2])
            if EN > (2 * object.EIN[37]):
                object.PEQIN[37][I] = object.PEQEL[1][I - IOFFN[37]]

        # 2S2 J=1 F=0.029
        if EN > object.EIN[39]:
            object.QIN[39][I] = 0.029 / (object.EIN[39] * BETA2) * (
                    log(BETA2 * GAMMA2 * EMASS2 / (4.0 * object.EIN[39])) - BETA2 - object.DEN[
                I] / 2.0) * BBCONST * EN / (EN + object.EIN[39] + object.E[2])
            if EN > (2 * object.EIN[39]):
                object.PEQIN[39][I] = object.PEQEL[1][I - IOFFN[39]]

        # 8D5 J=1 F=0.0035
        if EN > object.EIN[40]:
            object.QIN[40][I] = 0.0035 / (object.EIN[40] * BETA2) * (
                    log(BETA2 * GAMMA2 * EMASS2 / (4.0 * object.EIN[40])) - BETA2 - object.DEN[
                I] / 2.0) * BBCONST * EN / (EN + object.EIN[40] + object.E[2])
            if EN > (2 * object.EIN[40]):
                object.PEQIN[40][I] = object.PEQEL[1][I - IOFFN[40]]

        # 8D2 J=1 F=0.0386
        if EN > object.EIN[41]:
            object.QIN[41][I] = 0.0386 / (object.EIN[41] * BETA2) * (
                    log(BETA2 * GAMMA2 * EMASS2 / (4.0 * object.EIN[41])) - BETA2 - object.DEN[
                I] / 2.0) * BBCONST * EN / (EN + object.EIN[41] + object.E[2])
            if EN > (2 * object.EIN[41]):
                object.PEQIN[41][I] = object.PEQEL[1][I - IOFFN[41]]

        # 7S4 J=1 F=0.005
        if EN > object.EIN[42]:
            object.QIN[42][I] = 0.005 / (object.EIN[42] * BETA2) * (
                    log(BETA2 * GAMMA2 * EMASS2 / (4.0 * object.EIN[42])) - BETA2 - object.DEN[
                I] / 2.0) * BBCONST * EN / (EN + object.EIN[42] + object.E[2])
            if EN > (2 * object.EIN[42]):
                object.PEQIN[42][I] = object.PEQEL[1][I - IOFFN[42]]

        # 9D5 J=1 F=0.0005
        if EN > object.EIN[43]:
            object.QIN[43][I] = 0.0005 / (object.EIN[43] * BETA2) * (
                    log(BETA2 * GAMMA2 * EMASS2 / (4.0 * object.EIN[43])) - BETA2 - object.DEN[
                I] / 2.0) * BBCONST * EN / (EN + object.EIN[43] + object.E[2])
            if EN > (2 * object.EIN[43]):
                object.PEQIN[43][I] = object.PEQEL[1][I - IOFFN[43]]

        # 9D2 J=1 F=0.0250
        if EN > object.EIN[44]:
            object.QIN[44][I] = 0.025 / (object.EIN[44] * BETA2) * (
                    log(BETA2 * GAMMA2 * EMASS2 / (4.0 * object.EIN[44])) - BETA2 - object.DEN[
                I] / 2.0) * BBCONST * EN / (EN + object.EIN[44] + object.E[2])
            if EN > (2 * object.EIN[44]):
                object.PEQIN[44][I] = object.PEQEL[1][I - IOFFN[44]]

        # 8S4 J=1 F=0.0023
        if EN > object.EIN[45]:
            object.QIN[45][I] = 0.0023 / (object.EIN[45] * BETA2) * (
                    log(BETA2 * GAMMA2 * EMASS2 / (4.0 * object.EIN[45])) - BETA2 - object.DEN[
                I] / 2.0) * BBCONST * EN / (EN + object.EIN[45] + object.E[2])
            if EN > (2 * object.EIN[45]):
                object.PEQIN[45][I] = object.PEQEL[1][I - IOFFN[45]]

        #10D5 J=1 F=0.0005
        if EN > object.EIN[46]:
            object.QIN[46][I] = 0.0005 / (object.EIN[46] * BETA2) * (
                    log(BETA2 * GAMMA2 * EMASS2 / (4.0 * object.EIN[46])) - BETA2 - object.DEN[
                I] / 2.0) * BBCONST * EN / (EN + object.EIN[46] + object.E[2])
            if EN > (2 * object.EIN[46]):
                object.PEQIN[46][I] = object.PEQEL[1][I - IOFFN[46]]

        #10D2 J=1 F=0.0164
        if EN > object.EIN[47]:
            object.QIN[47][I] = 0.0164 / (object.EIN[47] * BETA2) * (
                    log(BETA2 * GAMMA2 * EMASS2 / (4.0 * object.EIN[47])) - BETA2 - object.DEN[
                I] / 2.0) * BBCONST * EN / (EN + object.EIN[47] + object.E[2])
            if EN > (2 * object.EIN[47]):
                object.PEQIN[47][I] = object.PEQEL[1][I - IOFFN[47]]

        #9S4 J=1 F=0.0014
        if EN > object.EIN[48]:
            object.QIN[48][I] = 0.0014 / (object.EIN[48] * BETA2) * (
                    log(BETA2 * GAMMA2 * EMASS2 / (4.0 * object.EIN[48])) - BETA2 - object.DEN[
                I] / 2.0) * BBCONST * EN / (EN + object.EIN[48] + object.E[2])
            if EN > (2 * object.EIN[48]):
                object.PEQIN[48][I] = object.PEQEL[1][I - IOFFN[48]]

        #HIGH J=1 F=0.0831
        if EN > object.EIN[49]:
            object.QIN[49][I] = 0.0831 / (object.EIN[49] * BETA2) * (
                    log(BETA2 * GAMMA2 * EMASS2 / (4.0 * object.EIN[49])) - BETA2 - object.DEN[
                I] / 2.0) * BBCONST * EN / (EN + object.EIN[49] + object.E[2])
            if EN > (2 * object.EIN[49]):
                object.PEQIN[49][I] = object.PEQEL[1][I - IOFFN[49]]
        for J in range(26, 50):
            if object.QIN[J][I] < 0.0:
                object.QIN[J][I] = 0.0
        QEXC=0.0
        for J in range(object.NIN):
            QEXC+=object.QIN[J][I]
        for J in range(12):
            object.Q[0][I]+=object.QION[J][I]
        object.Q[0][I]+=QEXC

    for J in range(object.NIN):
        if object.EFINAL <= object.EIN[J]:
            object.NIN = J
            break

